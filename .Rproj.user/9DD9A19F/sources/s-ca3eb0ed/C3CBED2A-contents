---
title: "cell_malaria"
author: "Freddy Drennan"
date: "5/25/2019"
output: html_document
---

```{r, warning = FALSE, message=FALSE}
library(keras)
library(tidyverse)
library(imager)
```


```{r}
model <- keras_model_sequential() %>% 
  layer_conv_2d(filters = 32,
                kernel_size = c(3, 3),
                activation = 'relu',
                input_shape = c(150, 150, 3)) %>% 
  layer_max_pooling_2d(pool_size = c(2, 2)) %>% 
  layer_conv_2d(filters = 64, 
                kernel_size = c(3, 3),
                activation = "relu",) %>% 
  layer_max_pooling_2d(pool_size = c(2, 2)) %>% 
  layer_conv_2d(filters = 128, 
                kernel_size = c(3, 3),
                activation = "relu",) %>% 
  layer_max_pooling_2d(pool_size = c(2, 2)) %>% 
  layer_conv_2d(filters = 128, 
                kernel_size = c(3, 3),
                activation = "relu",) %>% 
  layer_max_pooling_2d(pool_size = c(2, 2)) %>% 
  layer_flatten() %>% 
  layer_dropout(rate = 0.5) %>% 
  layer_dense(units = 512, activation = "relu") %>% 
  layer_dense(units = 1, activation = "sigmoid")
  
```


```{r}
# p2.8 23s
# model <- multi_gpu_model(model, gpus = 8)

model %>% 
  compile(
    loss = "binary_crossentropy",
    optimizer = optimizer_rmsprop(lr = 1e-4),
    metrics = c("acc")
  )
```

```{r}
train_dir <- 'cell_images'
validation_dir <- 'validation'
parasitized <-  'Parasitized'
uninfected <- 'Uninfected'
```

```{r}
map(
  c(train_dir, validation_dir),
  function(x) {
    if(dir.exists(x)) 
      unlink(x, recursive = TRUE, force = TRUE)
  }
)
```

```{r, echo = FALSE}

if(!file.exists('cell-images-for-detecting-malaria.zip')) {
  download.file('https://s3.us-east-2.amazonaws.com/drenrdatasets/cell-images-for-detecting-malaria.zip',
                'cell-images-for-detecting-malaria.zip')  
}

unzip('cell-images-for-detecting-malaria.zip')
dir.create(validation_dir)

dir.create(
  file.path(validation_dir, parasitized)
)

dir.create(
  file.path(validation_dir, uninfected)
)
```

```{r, echo = FALSE}
map(
  c(parasitized, uninfected),
  function(x) {
    
    image_files <- file.path(train_dir, x) %>% 
      list.files()
    
    n_files <- length(image_files)
    
    files_to_move <- 
      sample(x = image_files, size = trunc(n_files*.2))
    
    file.copy(
      from = file.path(train_dir, x, files_to_move),
      to = file.path(validation_dir, x, files_to_move),
      overwrite = TRUE, 
      recursive = FALSE, 
      copy.mode = TRUE
    )
    
    file.remove(file.path(train_dir, x, files_to_move))
    
  }
)

```

```{r}
datagen <- image_data_generator(
  rescale = 1/255,
  rotation_range = 40,
  width_shift_range = 0.2,
  height_shift_range = 0.2,
  shear_range = 0.2,
  zoom_range = 0.2,
  horizontal_flip = TRUE
)
```


```{r}
test_datagen <- 
  image_data_generator(rescale = 1/255)
```

```{r}
train_generator <- 
  flow_images_from_directory(
    train_dir,
    datagen,
    target_size = c(150, 150),
    batch_size = 220,
    class_mode = "binary"
  )

validation_generator <- 
  flow_images_from_directory(
    validation_dir,
    test_datagen,
    target_size = c(150, 150),
    batch_size = 100,
    class_mode = "binary"
  )
```


```{r}
history <- 
  model %>% 
  fit_generator(
    train_generator,
    steps_per_epoch = 100,
    epochs = 30,
    validation_data = validation_generator,
    validation_steps = 55
  )
```

```{r}
plot(history)
```

```{r}
save_model_hdf5(model, 'malaria_model.hdf5')
```


```{r, message=FALSE, warning=FALSE}
images <- generator_next(validation_generator)

predictions <- round(predict(model, images[[1]]))
```

```{r}
for(i in 1:32) {
  plot(
    as.cimg(images[[1]][i,,,]),
    main = paste0(
      (as.character(as.vector(predictions) == images[[2]])[[i]]), " PRED :", predictions[[i]]
    )
  )
}
```

```{r}
table(images[[2]], as.vector(predictions))
```
